-- Library Management System Database
-- Created by andrew01py
-- Date: 2024

DROP DATABASE IF EXISTS library_management;
CREATE DATABASE library_management;
USE library_management;

-- 1. Members Table (1-1 relationship with LibraryCard)
CREATE TABLE members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address VARCHAR(255) NOT NULL,
    date_of_birth DATE NOT NULL,
    membership_status ENUM('Active', 'Suspended', 'Expired') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_name (last_name, first_name)
);

-- 2. Library Cards Table (1-1 relationship with Members)
CREATE TABLE library_cards (
    card_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT UNIQUE NOT NULL,
    card_number VARCHAR(20) UNIQUE NOT NULL,
    issue_date DATE NOT NULL,
    expiration_date DATE NOT NULL,
    barcode VARCHAR(50) UNIQUE NOT NULL,
    FOREIGN KEY (member_id) REFERENCES members(member_id) ON DELETE CASCADE,
    INDEX idx_card_number (card_number)
);

-- 3. Authors Table
CREATE TABLE authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    birth_date DATE,
    death_date DATE,
    nationality VARCHAR(50),
    biography TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE INDEX idx_author_name (first_name, last_name)
);

-- 4. Publishers Table
CREATE TABLE publishers (
    publisher_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    address VARCHAR(255),
    phone VARCHAR(15),
    email VARCHAR(100),
    website VARCHAR(100),
    established_year YEAR,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 5. Books Table
CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    isbn VARCHAR(13) UNIQUE NOT NULL,
    title VARCHAR(255) NOT NULL,
    publisher_id INT NOT NULL,
    publication_year YEAR,
    edition INT DEFAULT 1,
    language VARCHAR(30) DEFAULT 'English',
    page_count INT,
    description TEXT,
    category VARCHAR(50) NOT NULL,
    price DECIMAL(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (publisher_id) REFERENCES publishers(publisher_id) ON DELETE RESTRICT,
    INDEX idx_title (title),
    INDEX idx_category (category),
    INDEX idx_isbn (isbn)
);

-- 6. Book-Author Junction Table (M-M relationship)
CREATE TABLE book_authors (
    book_id INT NOT NULL,
    author_id INT NOT NULL,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE,
    FOREIGN KEY (author_id) REFERENCES authors(author_id) ON DELETE CASCADE,
    INDEX idx_author_book (author_id, book_id)
);

-- 7. Book Copies Table
CREATE TABLE book_copies (
    copy_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    copy_number INT NOT NULL,
    status ENUM('Available', 'Checked Out', 'Reserved', 'Maintenance', 'Lost') DEFAULT 'Available',
    acquisition_date DATE NOT NULL,
    shelf_location VARCHAR(50) NOT NULL,
    condition ENUM('New', 'Good', 'Fair', 'Poor', 'Damaged') DEFAULT 'Good',
    last_maintenance_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE,
    UNIQUE INDEX idx_book_copy (book_id, copy_number),
    INDEX idx_status (status)
);

-- 8. Loans Table (1-M relationship with Members and Book Copies)
CREATE TABLE loans (
    loan_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT NOT NULL,
    copy_id INT NOT NULL,
    checkout_date DATE NOT NULL,
    due_date DATE NOT NULL,
    return_date DATE,
    late_fee DECIMAL(8,2) DEFAULT 0.00,
    status ENUM('Active', 'Returned', 'Overdue') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (member_id) REFERENCES members(member_id) ON DELETE RESTRICT,
    FOREIGN KEY (copy_id) REFERENCES book_copies(copy_id) ON DELETE RESTRICT,
    INDEX idx_member_loans (member_id, status),
    INDEX idx_due_date (due_date),
    INDEX idx_checkout_date (checkout_date)
);

-- 9. Reservations Table
CREATE TABLE reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT NOT NULL,
    book_id INT NOT NULL,
    reservation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('Pending', 'Fulfilled', 'Cancelled') DEFAULT 'Pending',
    priority INT DEFAULT 1,
    expected_available_date DATE,
    notification_sent BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (member_id) REFERENCES members(member_id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE,
    UNIQUE INDEX idx_member_book_reservation (member_id, book_id, status),
    INDEX idx_reservation_status (status)
);

-- 10. Fines Table
CREATE TABLE fines (
    fine_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT NOT NULL,
    loan_id INT,
    amount DECIMAL(8,2) NOT NULL,
    reason ENUM('Late Return', 'Damage', 'Lost Book', 'Other') NOT NULL,
    issue_date DATE NOT NULL,
    paid_date DATE,
    status ENUM('Outstanding', 'Paid', 'Waived') DEFAULT 'Outstanding',
    description TEXT,
    FOREIGN KEY (member_id) REFERENCES members(member_id) ON DELETE CASCADE,
    FOREIGN KEY (loan_id) REFERENCES loans(loan_id) ON DELETE SET NULL,
    INDEX idx_member_fines (member_id, status),
    INDEX idx_fine_status (status)
);

-- 11. Staff Table
CREATE TABLE staff (
    staff_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    position VARCHAR(50) NOT NULL,
    hire_date DATE NOT NULL,
    salary DECIMAL(10,2),
    supervisor_id INT,
    department VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (supervisor_id) REFERENCES staff(staff_id) ON DELETE SET NULL,
    INDEX idx_staff_name (last_name, first_name)
);

-- 12. Audit Log Table
CREATE TABLE audit_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    table_name VARCHAR(50) NOT NULL,
    record_id INT NOT NULL,
    action_type ENUM('INSERT', 'UPDATE', 'DELETE') NOT NULL,
    old_values JSON,
    new_values JSON,
    changed_by INT NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (changed_by) REFERENCES staff(staff_id) ON DELETE RESTRICT,
    INDEX idx_audit_table (table_name),
    INDEX idx_audit_date (changed_at)
);

-- Insert sample data for testing
INSERT INTO members (first_name, last_name, email, phone, address, date_of_birth) VALUES
('John', 'Doe', 'john.doe@email.com', '555-0101', '123 Main St, Cityville', '1985-03-15'),
('Jane', 'Smith', 'jane.smith@email.com', '555-0102', '456 Oak Ave, Townsville', '1990-07-22');

INSERT INTO library_cards (member_id, card_number, issue_date, expiration_date, barcode) VALUES
(1, 'LIB20240001', '2024-01-15', '2025-01-15', '123456789012'),
(2, 'LIB20240002', '2024-01-16', '2025-01-16', '123456789013');

INSERT INTO publishers (name, address, phone, email, established_year) VALUES
('Penguin Random House', '1745 Broadway, New York, NY', '212-782-9000', 'info@penguinrandomhouse.com', 2013),
('HarperCollins', '195 Broadway, New York, NY', '212-207-7000', 'contact@harpercollins.com', 1989);

INSERT INTO authors (first_name, last_name, birth_date, nationality) VALUES
('George', 'Orwell', '1903-06-25', 'British'),
('J.K.', 'Rowling', '1965-07-31', 'British'),
('Stephen', 'King', '1947-09-21', 'American');

INSERT INTO books (isbn, title, publisher_id, publication_year, category, page_count, price) VALUES
('9780451524935', '1984', 1, 1949, 'Fiction', 328, 9.99),
('9780439064873', 'Harry Potter and the Sorcerer''s Stone', 2, 1997, 'Fantasy', 320, 12.99),
('9781501142970', 'The Shining', 2, 1977, 'Horror', 447, 14.99);

INSERT INTO book_authors (book_id, author_id) VALUES
(1, 1),
(2, 2),
(3, 3);

INSERT INTO book_copies (book_id, copy_number, acquisition_date, shelf_location) VALUES
(1, 1, '2024-01-01', 'Fiction A-101'),
(1, 2, '2024-01-01', 'Fiction A-102'),
(2, 1, '2024-01-02', 'Fantasy B-201'),
(3, 1, '2024-01-03', 'Horror C-301');

-- Display confirmation message
SELECT 'Library Management System database created successfully!' AS Status;
